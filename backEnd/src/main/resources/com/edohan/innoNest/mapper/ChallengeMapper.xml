<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.edohan.innoNest.mapper.ChallengeMapper">

    <!-- 아이디어 목록 조회 -->
    <select id="challengeList" resultType="java.util.Map">
        SELECT 
            A.ID AS ID, 
            A.TITLE AS TITLE, 
            A.CONTENT AS CONTENT, 
            A.WRITER AS WRITER, 
            A.TAGS AS TAGS, 
            (SELECT COUNT(*) FROM TB_REACTIONS B WHERE B.IDEA_ID = A.ID AND REACTION_TYPE = 'LIKE') AS LIKE_COUNT, 
            (SELECT COUNT(*) FROM TB_REACTIONS B WHERE B.IDEA_ID = A.ID AND REACTION_TYPE = 'DISLIKE') AS DISLIKE_COUNT,
            A.WRITERDATE AS WRITERDATE, 
            A.UPDATEDATE AS UPDATEDATE, 
            A.VIEW_COUNT AS VIEW_COUNT, 
            A.CATEGORY AS CATEGORY, 
            A.STATUS AS STATUS
        FROM TB_IDEA A
        WHERE A.STATUS = 'ACTIVE'
        ORDER BY A.WRITERDATE DESC
    </select>
    
    <select id="myChallengeList" resultType="java.util.Map">
        SELECT 
            A.ID AS ID, 
            A.TITLE AS TITLE, 
            A.CONTENT AS CONTENT, 
            A.WRITER AS WRITER, 
            A.TAGS AS TAGS, 
            (SELECT COUNT(*) FROM TB_REACTIONS B WHERE B.IDEA_ID = A.ID AND REACTION_TYPE = 'LIKE') AS LIKE_COUNT, 
            (SELECT COUNT(*) FROM TB_REACTIONS B WHERE B.IDEA_ID = A.ID AND REACTION_TYPE = 'DISLIKE') AS DISLIKE_COUNT,
            A.WRITERDATE AS WRITERDATE, 
            A.UPDATEDATE AS UPDATEDATE, 
            A.VIEW_COUNT AS VIEW_COUNT, 
            A.CATEGORY AS CATEGORY, 
            A.STATUS AS STATUS
        FROM TB_IDEA A
        WHERE A.STATUS = 'ACTIVE'
            AND WRITER = #{userId}
        ORDER BY A.WRITERDATE DESC
    </select>
    
    <!-- 아이디어 세부 정보 조회 -->
    <select id="getChallengeDetail" parameterType="int" resultType="map">
        SELECT 
            A.ID AS ID,
            A.TITLE AS TITLE,
            A.CONTENT AS CONTENT,
            A.WRITER AS WRITER,
            A.TAGS AS TAGS,
            A.WRITERDATE AS WRITERDATE,
            A.UPDATEDATE AS UPDATEDATE,
            A.VIEW_COUNT AS VIEW_COUNT,
            A.CATEGORY AS CATEGORY,
            A.STATUS AS STATUS,
            (SELECT COUNT(*) FROM TB_REACTIONS B WHERE B.IDEA_ID = A.ID AND REACTION_TYPE = 'LIKE') AS LIKE_COUNT, 
            (SELECT COUNT(*) FROM TB_REACTIONS B WHERE B.IDEA_ID = A.ID AND REACTION_TYPE = 'DISLIKE') AS DISLIKE_COUNT
        FROM 
            TB_IDEA A
        WHERE 
            A.ID = #{id}
    </select>

    <!-- 아이디어 저장 -->
    <insert id="saveChallenge" parameterType="map">
        INSERT INTO TB_IDEA 
        (TITLE, CONTENT, WRITER, TAGS, CATEGORY, WRITERDATE, UPDATEDATE)
        VALUES 
        (#{title}, #{content}, #{userId}, #{tags}, #{category}, NOW(), NOW())
    </insert>

    <!-- 아이디어 수정 -->
    <update id="updateChallenge" parameterType="map">
        UPDATE TB_IDEA
        SET TITLE = #{title},
            CONTENT = #{content},
            UPDATEDATE = NOW()
        WHERE ID = #{id}
    </update>
    
    <!-- 아이디어 삭제 -->
    <delete id="deleteChallenge" parameterType="int">
        DELETE FROM TB_IDEA
        WHERE ID = #{id}
    </delete>

    <!-- 아이디어 조회수 증가 -->
    <update id="incViewCount" parameterType="int">
        UPDATE TB_IDEA
        SET VIEW_COUNT = VIEW_COUNT + 1
        WHERE ID = #{id}
    </update>

    <!-- 반응 추가 -->
    <insert id="addReaction" parameterType="map">
        INSERT INTO TB_REACTIONS 
        (MEMBER_ID, IDEA_ID, REACTION_TYPE)
        VALUES 
        (#{userId}, #{ideaId}, #{reactionType})
        ON DUPLICATE KEY UPDATE REACTION_TYPE = VALUES(REACTION_TYPE)
    </insert>

    <!-- 반응 삭제 -->
    <delete id="removeReaction" parameterType="map">
        DELETE FROM TB_REACTIONS
        WHERE MEMBER_ID = #{userId} 
        AND IDEA_ID = #{ideaId}
        AND REACTION_TYPE = #{reactionType}
    </delete>


    <!-- 기존 반응 유형 조회 -->
    <select id="getExistingReactionType" parameterType="map" resultType="string">
        SELECT REACTION_TYPE
        FROM TB_REACTIONS
        WHERE MEMBER_ID = #{userId}
        AND IDEA_ID = #{ideaId}
    </select>

    <!-- 반응 유형 업데이트 -->
    <update id="updateReaction" parameterType="map">
        UPDATE TB_REACTIONS
        SET REACTION_TYPE = #{reactionType}
        WHERE MEMBER_ID = #{userId}
        AND IDEA_ID = #{ideaId}
    </update>

</mapper>
